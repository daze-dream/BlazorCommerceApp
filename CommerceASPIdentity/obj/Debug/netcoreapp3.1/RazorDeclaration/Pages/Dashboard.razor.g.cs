// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace EndToEndTest.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
#nullable restore
#line 1 "C:\Users\Sandy\Documents\GitHub\semester-project-group-5-commerce\CommerceASPIdentity\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Sandy\Documents\GitHub\semester-project-group-5-commerce\CommerceASPIdentity\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Sandy\Documents\GitHub\semester-project-group-5-commerce\CommerceASPIdentity\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Sandy\Documents\GitHub\semester-project-group-5-commerce\CommerceASPIdentity\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Sandy\Documents\GitHub\semester-project-group-5-commerce\CommerceASPIdentity\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Sandy\Documents\GitHub\semester-project-group-5-commerce\CommerceASPIdentity\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Sandy\Documents\GitHub\semester-project-group-5-commerce\CommerceASPIdentity\_Imports.razor"
using EndToEndTest;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Sandy\Documents\GitHub\semester-project-group-5-commerce\CommerceASPIdentity\_Imports.razor"
using EndToEndTest.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "C:\Users\Sandy\Documents\GitHub\semester-project-group-5-commerce\CommerceASPIdentity\Pages\Dashboard.razor"
using CsvHelper;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Sandy\Documents\GitHub\semester-project-group-5-commerce\CommerceASPIdentity\Pages\Dashboard.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Sandy\Documents\GitHub\semester-project-group-5-commerce\CommerceASPIdentity\Pages\Dashboard.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Sandy\Documents\GitHub\semester-project-group-5-commerce\CommerceASPIdentity\Pages\Dashboard.razor"
using EndToEndTest.Data.CommerceDataModels;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Sandy\Documents\GitHub\semester-project-group-5-commerce\CommerceASPIdentity\Pages\Dashboard.razor"
using Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Sandy\Documents\GitHub\semester-project-group-5-commerce\CommerceASPIdentity\Pages\Dashboard.razor"
using System.Security.Claims;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Sandy\Documents\GitHub\semester-project-group-5-commerce\CommerceASPIdentity\Pages\Dashboard.razor"
using System.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Sandy\Documents\GitHub\semester-project-group-5-commerce\CommerceASPIdentity\Pages\Dashboard.razor"
using Microsoft.AspNetCore.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Sandy\Documents\GitHub\semester-project-group-5-commerce\CommerceASPIdentity\Pages\Dashboard.razor"
using Microsoft.Data.SqlClient;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Sandy\Documents\GitHub\semester-project-group-5-commerce\CommerceASPIdentity\Pages\Dashboard.razor"
using Microsoft.AspNetCore.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Sandy\Documents\GitHub\semester-project-group-5-commerce\CommerceASPIdentity\Pages\Dashboard.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\Sandy\Documents\GitHub\semester-project-group-5-commerce\CommerceASPIdentity\Pages\Dashboard.razor"
using System.Text.RegularExpressions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Users\Sandy\Documents\GitHub\semester-project-group-5-commerce\CommerceASPIdentity\Pages\Dashboard.razor"
using Microsoft.AspNetCore.Mvc;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "C:\Users\Sandy\Documents\GitHub\semester-project-group-5-commerce\CommerceASPIdentity\Pages\Dashboard.razor"
using System.Runtime.Serialization.Formatters.Binary;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "C:\Users\Sandy\Documents\GitHub\semester-project-group-5-commerce\CommerceASPIdentity\Pages\Dashboard.razor"
using Utils;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/Dashboard")]
    [Microsoft.AspNetCore.Components.RouteAttribute("/Account")]
    public partial class Dashboard : OwningComponentBase<NotificationServices>
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 405 "C:\Users\Sandy\Documents\GitHub\semester-project-group-5-commerce\CommerceASPIdentity\Pages\Dashboard.razor"
       

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    List<AmountConstraint> ac;
    List<TimeConstraint> tc;
    List<LocationConstraint> lc;
    List<UserToNotifications> notifList;
    List<TriggeredNotif> triggeredList;
    List<joinAllNotifsResult> allJoinedNotifs;
    UserToNotifications tempUTN;
        //Match match = Regex.Match("")

    AmountConstraint tempAC = new AmountConstraint();
    TimeConstraint tempTC = new TimeConstraint();
    LocationConstraint tempLC = new LocationConstraint();
    private bool displayManage = false;
    private bool displayNotification = false;
    private bool displayDate = false;

    /// <summary>
    /// IMPORTANT: gets the current month and the first 3 letters as an abbreviation. This is used to get the proper monthly count in functions
    /// </summary>
    string currMonth = DateTime.Now.ToString("MMMM").Substring(0, 3);

    bool showFilter = false;
    private int triggerCt = 0;
    private string month = DateTime.Now.ToString("MMMM").Substring(0, 3);
    private string notiff = "";

    private string manageDropDown => displayManage ? "d-block" : null;
    private string notificationDropDown => displayNotification ? "d-block" : null;
    private string dateDropDown => displayDate ? "d-block" : null;

    private void setTrigger(int val)
    {
        triggerCt = val;
    }

    private void FilterSearch(ChangeEventArgs changeEventArgs)
    {
        showFilter = false;
        string notifID = changeEventArgs.Value.ToString();
        if (notifID == "all")
        {
            notiff = "All notifications";
            if (triggeredList != null)
            {
                setTrigger(triggeredList.Count());
            }
        }
        else
        {
            int convID = Int32.Parse(notifID);
            foreach (var y in notifList)
            {
                if (convID == y.NotificationId)
                {
                    if (month == "Year: ")
                    {
                        setTrigger(Int32.Parse(@getYearlySumOfNotif(y).ToString()));
                    }
                    else
                    {
                        setTrigger(Int32.Parse(@y.GetType().GetProperty(month).GetValue(y).ToString()));
                    }
                }
            }
            foreach (var x in ac)
            {
                if (convID == x.NotificationId)
                {
                    notiff = "Transactions between " + x.Min + " - " + x.Max + ".";
                }
            }
            foreach (var x in lc)
            {
                if (convID == x.NotificationId)
                {
                    notiff = "Transactions from " + x.Location + ".";
                }
            }
            foreach (var x in tc)
            {
                if (convID == x.NotificationId)
                {
                    notiff = "Transactions between " + revertDateTime(x.TimeIn) + " - " + revertDateTime(x.TimeOut) + ".";
                }
            }
        }
    }

    void openFilter()
    {
        showFilter = true;
    }
    void closeFilter()
    {
        showFilter = false;
    }


    /// <summary>
    /// Prepares the page and its variables on load. Since it is async, things will be null for a bit
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

        notifList = await Service.GetNotifJoinTable(userId);
        triggeredList = await Service.GetAllTriggeredNotifEntries(user.Identity.Name);
        ac = await Service.GetAmountConstraints(notifList);
        tc = await Service.GetTimeConstraints(notifList);
        lc = await Service.GetLocationConstraints(notifList);
        await getAllNotifsJoinedWithMonthsAsync();
    }

    int returnCount()
    {
        int counter = 0;
        if (ac != null)
        {
            counter += ac.Count;
        }
        if (lc != null)
        {
            counter += lc.Count;
        }
        if (tc != null)
        {
            counter += tc.Count;
        }
        return counter;
    }

    string revertDateTime(TimeSpan theDateTime)
    {
        DateTime time = DateTime.Today.Add(theDateTime);
        string convertedTime = time.ToString("h:mm tt");
        return convertedTime;
    }

    private void ToggleManageDropDown()
    {
        displayManage = !displayManage;
    }
    private void ToggleNotificationDropDown()
    {
        displayNotification = !displayNotification;
    }
    private void ToggleDateDropDown()
    {
        displayDate = !displayDate;
    }

    /// <summary>
    /// Returns the string as pure HTML from the database to render in page
    /// </summary>
    /// <param name="text"></param>
    /// <returns></returns>
    public MarkupString getHTMLMarkup(string text)
    {
        return (MarkupString)text;
    }

    /// <summary>
    /// Gets the yearly sum of the notification passed in.
    /// </summary>
    /// <param name="notif"></param>
    /// <returns></returns>
    public int getYearlySumOfNotif(UserToNotifications notif)
    {
        return notif.Jan
        + notif.Feb
        + notif.Mar
        + notif.Apr
        + notif.May
        + notif.Jun
        + notif.Jul
        + notif.Aug
        + notif.Sep
        + notif.Oct
        + notif.Nov
        + notif.Dec;
    }

    public int getIndexOfSubstring(string text, string toMatch)
    {
        return text.IndexOf(toMatch);
    }

    /// <summary>
    /// Async gets all the user's notifications joined with months.
    /// </summary>
    /// <returns></returns>
    async Task getAllNotifsJoinedWithMonthsAsync()
    {
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        allJoinedNotifs = await Service.getAllNotifsJoinedWithDates(userId);
    }



#line default
#line hidden
#nullable disable
#nullable restore
#line 612 "C:\Users\Sandy\Documents\GitHub\semester-project-group-5-commerce\CommerceASPIdentity\Pages\Dashboard.razor"
           

    async Task DownloadFile()
    {
        using var memorystream = new MemoryStream();
        using var writer = new StreamWriter(memorystream);
        //using var writer = new StreamWriter("../export.csv");
        using var csv = new CsvWriter(writer, CultureInfo.InvariantCulture);
        {
            csv.WriteRecords(allJoinedNotifs);
            writer.Flush();
        }
        string filename = "monthly_notif_trigger_export_" + DateTime.Now.ToString("yyyy") + ".csv";
        //var bytes = System.Text.Encoding.UTF8.GetBytes(text);
        //await FileUtils.SaveAs(js, "export.csv", memorystream.ToArray());
        //var result = writer.ToString();
        //Console.WriteLine(result);
        await Service.SaveAs(js, filename, memorystream.ToArray());
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime js { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IHttpContextAccessor HttpContextAccessor { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    }
}
#pragma warning restore 1591
