@using EndToEndTest.Data.CommerceDataModels
@using Data
@using System.Security.Claims
@using Microsoft.AspNetCore.Http;
@using Microsoft.Data.SqlClient
@using Microsoft.AspNetCore.Components.Forms
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpContextAccessor HttpContextAccessor
@*
    Using OwningComponentBase ensures that the service and related services
    that share its scope are disposed with the component.
    Otherwise DbContext in ForecastService will live for the life of the
    connection, which may be problematic if clients stay
    connected for a long time.
    We access WeatherForecastService using @Service
*@
@inherits OwningComponentBase<NotificationServices>


@page "/Dashboard"

<AuthorizeView>
    <Authorized Context="Auth">
        @page "/Account"
        <div class="container mt-5">
            <h2>My Dashboard</h2>
            <hr class="solid mt-5 custom_hr_solid" />
        </div>

        <div class="container mt-3">
            <div class="row">
                <div class="col-7 my-auto">
                    <p>Welcome ___________ ! </p>
                </div>
                <div class="col-5">
                    <table class="float-right">
                        <tr>
                            <td>
                                <div class="dropdown">
                                    <button class="primary_button dropdown-toggle" type="button" id="dropdownMenuButton" @onclick="@ToggleManageDropDown">
                                        Manage
                                    </button>
                                    <div class="@manageDropDown dropdown-menu ml-1" aria-labelledby="dropdownMenuButton" @onclick="@ToggleManageDropDown">
                                        <a class="dropdown-item" href="Transactions">Transactions</a>
                                        <a class="dropdown-item" href="Notifications">Notifications</a>
                                        <!--<a class="dropdown-item" href="/Identity/Account/Manage">Account</a>-->
                                    </div>
                                </div>
                            </td>
                        </tr>
                    </table>
                </div>
            </div>
        </div>

        <div class="container mt-5">
            <div class="card text-left">
                <div class="card-header">
                    <h3>Notification Rules</h3>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-2 d-flex align-items-center justify-content-center">
                            <div id="circle" class="text-center pt-5">
                                Total:
                                <h2>@returnCount()</h2>
                            </div>
                        </div>
                        <div class="col-10 dotted_border my-auto">
                            @if ((ac == null) && (tc == null) && (lc == null))
                            {
                                <p><em>There are no notifications rules to display.</em></p>
                            }
                            else
                            {
                                <ul>
                                    @foreach (var x in ac)
                                    {
                                        <li>Transactions between $@x.Min - $@x.Max.</li>
                                    }
                                    @foreach (var x in tc)
                                    {
                                        <li>Transactions between @revertDateTime(x.TimeIn) - @revertDateTime(x.TimeOut).</li>
                                    }
                                    @foreach (var x in lc)
                                    {
                                        <li>Transactions from @x.Location.</li>
                                    }
                                </ul>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="container mt-5">
            <div class="card text-left">
                <div class="card-header">
                    <h3>Notification Summary</h3>
                </div>
                <div class="card-body">
                    <div class="row">
                    <div class="col-2 d-flex align-items-center justify-content-center">
                        <div id="circle" class="text-center pt-5">
                            Triggered:
                            <h2>0</h2>
                        </div>
                    </div>
                    <div class="col-10 dotted_border my-auto">
                            <p>Month Year</p>
                            <p>For: Notification or All Notifications</p>
                    </div>
                        </div>
                    </div>
                    <div class="card-footer">
                        <div class="row justify-content-between">
                            <div class="col-6 text-left">
                                <button class="primary_button" @onclick="openFilter">Filter</button>
                            </div>
                            <div class="col-6 text-right">
                                <button class="primary_button">Export</button>
                            </div>
                        </div>
                    </div>
                </div>
        </div>

        @if (showFilter) 
        { 
            <div class="modal" tabindex="-1" style="display:block" role="dialog" id="larger-modal">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content custom-modal">

                        <div class="modal-header">
                            <h5 class="col-12 modal-title text-center">FILTER NOTIFICATION SUMMARY</h5>
                        </div>
                            <div class="modal-body">
                                <hr class="solid custom_hr_solid mb-3" />
                                <div class="container">
                                    <div class="form-group row mt-4">
                                        <label class="col-sm-5 col-form-label">Date: </label>
                                        <div class="col-sm-7">
                                            <select>
                                                <option hidden disabled selected></option>
                                                <!-- THIS IS WHERE WE FOR LOOP ALL THE MONTHS -->
                                                <option>January</option>
                                                <option>February</option>
                                                <option>March</option>
                                                <option>April</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div class="form-group row mt-4">
                                        <label class="col-sm-5 col-form-label">Type of Notification: </label>
                                        <div class="col-sm-7">
                                            <select>
                                                <option hidden disabled selected></option>
                                                <!-- THIS IS WHERE WE FOR LOOP ALL THE NOTIFICATIONS-->
                                                <option>Notification - 5pm - 10pm</option>
                                                <option>Notification - From Target</option>
                                                <option>Notification - $10.01 - $12.01</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div class="row mt-4 align-items-center">
                                    </div>
                                </div>
                            </div>

                            <div class="modal-footer">
                                <button class="primary_button" @onclick="FilterSearch">
                                    Filter
                                </button>
                                <button class="primary_button ml-auto" @onclick="closeFilter">
                                    Cancel
                                </button>
                            </div>
                    </div>
                </div>
            </div>

        }

        <div class="container mt-5">
            <div class="row">
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="container">
            <h6>Please sign in to access your account information.</h6>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    List<AmountConstraint> ac;
    List<TimeConstraint> tc;
    List<LocationConstraint> lc;
    List<UserToNotifications> notifList;

    AmountConstraint tempAC = new AmountConstraint();
    TimeConstraint tempTC = new TimeConstraint();
    LocationConstraint tempLC = new LocationConstraint();
    private bool displayManage = false;
    private bool displayNotification = false;
    private bool displayDate = false;

    bool showFilter = false;

    private string manageDropDown => displayManage ? "d-block" : null;
    private string notificationDropDown => displayNotification ? "d-block" : null;
    private string dateDropDown => displayDate ? "d-block" : null;

    async Task FilterSearch()
    {
        showFilter = false;
    }

    void openFilter()
    {
        showFilter = true;
    }
    void closeFilter()
    {
        showFilter = false;
    }

    int returnCount()
    {
        int counter = 0;
        if (ac != null)
        {
            counter += ac.Count;
        }
        if (lc != null)
        {
            counter += lc.Count;
        }
        if (tc != null)
        {
            counter += tc.Count;
        }
        return counter;
    }

    string revertDateTime(TimeSpan theDateTime)
    {
        DateTime time = DateTime.Today.Add(theDateTime);
        string convertedTime = time.ToString("h:mm tt");
        return convertedTime;
    }

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

        notifList = await Service.GetNotifJoinTable(userId);
        ac = await Service.GetAmountConstraints(notifList);
        tc = await Service.GetTimeConstraints(notifList);
        lc = await Service.GetLocationConstraints(notifList);
    }

    private void ToggleManageDropDown()
    {
        displayManage = !displayManage;
    }
    private void ToggleNotificationDropDown()
    {
        displayNotification = !displayNotification;
    }
    private void ToggleDateDropDown()
    {
        displayDate = !displayDate;
    }

}