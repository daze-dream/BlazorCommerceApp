@using C1.Chart;
@using C1.Blazor.Chart;
@using C1.Blazor.Chart.Interaction;
<!-- Using GrapeCity Chart -->

@using EndToEndTest.Data.CommerceDataModels
@using Data
@using EndToEndTest.Components
@using System.Security.Claims
@using System.Web;
@using Microsoft.AspNetCore.Http;
@using Microsoft.Data.SqlClient
@using Microsoft.AspNetCore.Components.Forms 
@using System.Text.RegularExpressions; 
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpContextAccessor HttpContextAccessor
@*
    Using OwningComponentBase ensures that the service and related services
    that share its scope are disposed with the component.
    Otherwise DbContext in ForecastService will live for the life of the
    connection, which may be problematic if clients stay
    connected for a long time.
    We access WeatherForecastService using @Service
*@
@inherits OwningComponentBase<NotificationServices>


@page "/Dashboard"

<AuthorizeView>
    <Authorized>
        @page "/Account"
        <div class="container mt-5">
            <h2>My Dashboard</h2>
            <hr class="solid mt-5 custom_hr_solid" />
        </div>

        <div class="container mt-3">
            <div class="row">
                <div class="col-7 my-auto">
                    <p>Welcome @context.User.Identity.Name ! </p>
                </div>
                <div class="col-5">
                    <table class="float-right">
                        <tr>
                            <td>
                                <div class="dropdown">
                                    <button class="primary_button dropdown-toggle" type="button" id="dropdownMenuButton" @onclick="@ToggleManageDropDown">
                                        Manage
                                    </button>
                                    <div class="@manageDropDown dropdown-menu ml-1" aria-labelledby="dropdownMenuButton" @onclick="@ToggleManageDropDown">
                                        <a class="dropdown-item" href="Transactions">Transactions</a>
                                        <a class="dropdown-item" href="Notifications">Notifications</a>
                                        <a class="dropdown-item" href="/Identity/Account/Manage">Account</a>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    </table>
                </div>
            </div>
        </div>

        <div class="container mt-5">
            <div class="card text-left">
                <div class="card-header">
                    <h3>Notification Rules</h3>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-2 d-flex align-items-center justify-content-center">
                            <div id="circle" class="text-center p-4">
                                Total:
                                <h2>@returnCount()</h2>
                            </div>
                        </div>
                        <div class="col-10 dotted_border">
                            @if ((ac == null) && (tc == null) && (lc == null) && (notifList == null))
                            {
                                <p><em>There are no notifications rules to display.</em></p>
                            }
                            else
                            {
                                <ul>
                                    @foreach (var x in ac)
                                    {
                                        <li>@x.NotificationId : Transactions between $@x.Min - $@x.Max.</li>
                                        <ul>
                                            @foreach (var y in notifList)
                                            {
                                                if (x.NotificationId == y.NotificationId)
                                                {
                                                    <li>@getYearlySumOfNotif(y) This year</li>
                                                    <li>@y.GetType().GetProperty(currMonth).GetValue(y) this month</li>
                                                }
                                            }

                                        </ul>
                                    }
                                    @foreach (var x in tc)
                                    {
                                        <li>@x.NotificationId : Transactions between @revertDateTime(x.TimeIn) - @revertDateTime(x.TimeOut).</li>
                                        <ul>
                                            @foreach (var y in notifList)
                                            {
                                                if (x.NotificationId == y.NotificationId)
                                                {
                                                    <li>@getYearlySumOfNotif(y) This year</li>
                                                    <li>@y.GetType().GetProperty(currMonth).GetValue(y) this month</li>
                                                }
                                            }

                                        </ul>

                                    }
                                    @foreach (var x in lc)
                                    {
                                        <li>@x.NotificationId : Transactions from @x.Location.</li>
                                        <ul>
                                            @foreach (var y in notifList)
                                            {
                                                if (x.NotificationId == y.NotificationId)
                                                {
                                                    <li>@getYearlySumOfNotif(y) This year</li>
                                                    <li>@y.GetType().GetProperty(currMonth).GetValue(y) this month</li>
                                                }
                                            }

                                        </ul>
                                    }
                                </ul>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <div class="container mt-3">
                @if (notifList == null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <table class="table">
                        <thead>
                            <tr>
                                @foreach (var property in typeof(UserToNotifications).GetProperties())
                                {
                                    if (property.Name == "UserId" || property.Name == "AmountConstraint" || property.Name == "LocationConstraint" || property.Name == "TimeConstraint")
                                        continue;
                                    else
                                    {
                                        <th>@property.Name</th>
                                    }
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var x in notifList)
                            {
                                <tr>
                                    @foreach (var property in typeof(UserToNotifications).GetProperties())
                                    {
                                        if (property.Name == "UserId" || property.Name == "AmountConstraint" || property.Name == "LocationConstraint" || property.Name == "TimeConstraint")
                                            continue;
                                        else
                                        {
                                            <td>@property.GetValue(x)</td>
                                        }
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>

                }
            </div>

            <div class="container mt-5">
                <div class="card text-left">
                    <div class="card-header">
                        <h3>Notification Summary</h3>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-3 d-flex flex-wrap justify-content-center align-content-center">
                                <div>
                                    <div id="circle" class="text-center pt-4 pb-4">
                                        Triggered:
                                        @if (triggeredList == null)
                                        {<h2>0</h2>}
                                        else
                                        {<h2>@triggeredList.Count()</h2>}
                                    </div>
                                </div>
                            </div>

                            <div class="col-9 dotted_border">
                                <div class="row">
                                    <div class="col-6">
                                        <div class="dropdown">
                                            <!-- Align the Select Notifications to the Upper Left Corner -->
                                            <button class="primary_button dropdown-toggle" type="button" id="dropdownMenuButton" @onclick="@ToggleNotificationDropDown">
                                                All Notifications
                                            </button>
                                            <div class="@notificationDropDown dropdown-menu ml-1" aria-labelledby="dropdownMenuButton" @onclick="@ToggleNotificationDropDown">
                                                <a class="dropdown-item">Notification 1</a>
                                                <a class="dropdown-item">Notification 2</a>
                                                <a class="dropdown-item">Notification 3</a>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-6">
                                        <!-- Align the Search Date to the Upper Right Corner -->
                                        <div class="dropdown">
                                            <button class="primary_button dropdown-toggle ml-1" type="button" id="dropdownMenuButton" @onclick="@ToggleDateDropDown">
                                                Month
                                            </button>
                                            <div class="@dateDropDown dropdown-menu" aria-labelledby="dropdownMenuButton" @onclick="@ToggleDateDropDown">
                                                <a class="dropdown-item" href="#">Year</a>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <FlexChart Class="chart" ChartType="ChartType.Line"
                                           LegendPosition="Position.Bottom" HeaderContent="All Notifications"
                                           BindingX="date" ItemsSource="@notif1">
                                    <SeriesCollection>
                                        <Series Name="NR1" Binding="notificationcount" Style="@redLine" /> <!--Bind the Y axis-->
                                        <Series Name="NR2" ItemsSource="@notif2" Binding="notificationcount" Style="@blueLine" /> <!--Bind the Y axis-->
                                        <Series Name="NR3" ItemsSource="@notif3" Binding="notificationcount" Style="@greenLine" /> <!--Bind the Y axis-->
                                    </SeriesCollection>
                                    <MarkerCollection>
                                        <LineMarker Lines="LineMarkerLines.Both" LineStyle="stroke:gray;stroke-width:0"
                                                    Content=@content HorizontalPosition="0.5" VerticalPosition="0.5"
                                                    Interaction="action ?? LineMarkerInteraction.None" />
                                    </MarkerCollection>
                                    <AxisCollection>
                                        <Axis AxisType="AxisType.Y" Position="Position.Left" Title="Number of Notifications" AxisLine="true" MajorGrid="true" MajorTickMarks="TickMark.Outside" />
                                        <Axis AxisType="AxisType.X" Position="Position.Bottom" AxisLine="false" Format="MMM-d" MajorGrid="true" MajorTickMarks="TickMark.None" />
                                    </AxisCollection>
                                </FlexChart>
                                <br />
                                <!-- This is where I mess around-->
                                @if (triggeredList == null)
                                {
                                    <p><em>Standby...</em></p>
                                }
                                else
                                {
                                    <FlexChart Class="chart" ChartType="ChartType.Line"
                                               LegendPosition="Position.Bottom" HeaderContent="All Notifications"
                                               BindingX="date" ItemsSource="@notif1">
                                        <SeriesCollection>
                                            <Series Name="NR1" Binding="notificationcount" Style="@redLine" /> <!--Bind the Y axis-->
                                            <Series Name="NR2" ItemsSource="@notif2" Binding="notificationcount" Style="@blueLine" /> <!--Bind the Y axis-->
                                            <Series Name="NR3" ItemsSource="@notif3" Binding="notificationcount" Style="@greenLine" /> <!--Bind the Y axis-->
                                            @*@foreach(var )*@
                                        </SeriesCollection>
                                        <MarkerCollection>
                                            <LineMarker Lines="LineMarkerLines.Both" LineStyle="stroke:gray;stroke-width:0"
                                                        Content=@content HorizontalPosition="0.5" VerticalPosition="0.5"
                                                        Interaction="action ?? LineMarkerInteraction.None" />
                                        </MarkerCollection>
                                        <AxisCollection>
                                            <Axis AxisType="AxisType.Y" Position="Position.Left" Title="Number of Notifications" AxisLine="true" MajorGrid="true" MajorTickMarks="TickMark.Outside" />
                                            <Axis AxisType="AxisType.X" Position="Position.Bottom" AxisLine="false" Format="MMM-d" MajorGrid="true" MajorTickMarks="TickMark.None" />
                                        </AxisCollection>
                                    </FlexChart>
                                }
                                <div class="row">
                                    <button class="primary_button">Export </button> <!-- Align Export Button to the right corner.-->
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!--Testing triggered notifications display-->
        <div class="container mt-3">
            JANK
            @if (triggeredList == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Date</th>
                            <th>Body</th>
                            <th>Mod Body</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var x in triggeredList)
                        {
                            <tr>
                                <td>@x.TrigNotifId</td>
                                <td>@x.DateAdded</td>
                                <td>@getHTMLMarkup(x.EmailBody)</td>
                                @if (x.EmailBody.Length < 212)
                                { <td>@getHTMLMarkup(x.EmailBody)</td> }
                                else
                                {<td>@x.EmailBody.Substring(131).Substring(0, getIndexOfSubstring(x.EmailBody.Substring(131),"If"))</td>}
                            </tr>
                        }
                    </tbody>
                </table>
                <br />

            }
        </div>



    </Authorized>
    <NotAuthorized>
        <div class="container">
            <h6>Please sign in to access your account information.</h6>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    List<AmountConstraint> ac;
    List<TimeConstraint> tc;
    List<LocationConstraint> lc;
    List<UserToNotifications> notifList;
    List<TriggeredNotif> triggeredList;
    UserToNotifications tempUTN;
    //Match match = Regex.Match("")

    AmountConstraint tempAC = new AmountConstraint();
    TimeConstraint tempTC = new TimeConstraint();
    LocationConstraint tempLC = new LocationConstraint();

    /// <summary>
    /// IMPORTANT: gets the current month and the first 3 letters as an abbreviation. This is used to get the proper monthly count in functions
    /// </summary>
    string currMonth = DateTime.Now.ToString("MMMM").Substring(0, 3);

    private bool displayManage = false;
    private bool displayNotification = false;
    private bool displayDate = false;

    private string manageDropDown => displayManage ? "d-block" : null;
    private string notificationDropDown => displayNotification ? "d-block" : null;
    private string dateDropDown => displayDate ? "d-block" : null;

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

        notifList = await Service.GetNotifJoinTable(userId);
        triggeredList = await Service.GetAllTriggeredNotifEntries(user.Identity.Name);
        ac = await Service.GetAmountConstraints(notifList);
        tc = await Service.GetTimeConstraints(notifList);
        lc = await Service.GetLocationConstraints(notifList);
    }


    int returnCount()
    {
        int counter = 0;
        if (ac != null)
        {
            counter += ac.Count;
        }
        if (lc != null)
        {
            counter += lc.Count;
        }
        if (tc != null)
        {
            counter += tc.Count;
        }
        return counter;
    }

    string revertDateTime(TimeSpan theDateTime)
    {
        DateTime time = DateTime.Today.Add(theDateTime);
        string convertedTime = time.ToString("h:mm tt");
        return convertedTime;
    }




    private void ToggleManageDropDown()
    {
        displayManage = !displayManage;
    }
    private void ToggleNotificationDropDown()
    {
        displayNotification = !displayNotification;
    }
    private void ToggleDateDropDown()
    {
        displayDate = !displayDate;
    }



    LineMarkerInteraction[] actions = new LineMarkerInteraction[] { LineMarkerInteraction.None, LineMarkerInteraction.Move, LineMarkerInteraction.Drag };
    LineMarkerInteraction? action = LineMarkerInteraction.Move;

    string content = "<div style='padding:6px;border:1px solid darkgrey;background:#f0f0f0;'>{x:MMM-dd}<br># of Notifications: {y}</div>";
    string redLine = "fill:rgba(227, 0, 0, 1);stroke:rgba(227, 0, 0, 1);stroke-width:3";
    string blueLine = "fill:rgba(0, 122, 163, 1);stroke:rgba(0, 122, 163, 1);stroke-width:3";
    string greenLine = "fill:rgba(79, 168, 0, 1);stroke:rgba(79, 168, 0, 1);stroke-width:3";

    List<object>
    notif1 = DataSource.getData();
    List<object>
        notif2 = DataSource.getData();
    List<object>
        notif3 = DataSource.getData();

    // Dummy Data for Chart
    public class DataSource
    {
        public static List<object>
            getData()
        {
            var rng = new Random();
            return new List<object>
                ()
            {

                    new {date = new DateTime(2021, 1, 26), notificationcount = rng.Next(0, 15)},
                    new {date = new DateTime(2021, 2, 1), notificationcount = rng.Next(0, 15)},
                    new {date = new DateTime(2021, 3, 1), notificationcount = rng.Next(0, 15)},
                    new {date = new DateTime(2021, 3, 20), notificationcount = rng.Next(0, 15)},
                    new {date = new DateTime(2021, 4, 21), notificationcount = rng.Next(0, 15)},
                    new {date = new DateTime(2021, 4, 26), notificationcount = rng.Next(0, 15)},
                    new {date = new DateTime(2021, 4, 27), notificationcount = rng.Next(0, 15)}
                    };
        }
    }

    /// <summary>
    /// Returns the string as pure HTML from the database to render in page
    /// </summary>
    /// <param name="text"></param>
    /// <returns></returns>
    public MarkupString getHTMLMarkup(string text)
    {
        return (MarkupString)text;
    }


    /// <summary>
    /// Gets the yearly sum of the notification passed in.
    /// </summary>
    /// <param name="notif"></param>
    /// <returns></returns>
    public int getYearlySumOfNotif(UserToNotifications notif)
    {
        return notif.Jan
            + notif.Feb
            + notif.Mar
            + notif.Apr
            + notif.May
            + notif.Jun
            + notif.Jul
            + notif.Aug
            + notif.Sep
            + notif.Oct
            + notif.Nov
            + notif.Dec;
    }

    public int getIndexOfSubstring(string text, string toMatch)
    {
        return text.IndexOf(toMatch);
    }


}