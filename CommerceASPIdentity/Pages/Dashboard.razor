@using CsvHelper;
@using System.IO;
@using System.Globalization;


@using EndToEndTest.Data.CommerceDataModels
@using Data
@using System.Security.Claims
@using System.Web;
@using Microsoft.AspNetCore.Http;
@using Microsoft.Data.SqlClient
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.RegularExpressions;
@using Microsoft.AspNetCore.Mvc;
@using System.Runtime.Serialization.Formatters.Binary
@using Utils;


@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager navManager
@inject IJSRuntime js
@*
    Using OwningComponentBase ensures that the service and related services
    that share its scope are disposed with the component.
    Otherwise DbContext in ForecastService will live for the life of the
    connection, which may be problematic if clients stay
    connected for a long time.
    We access WeatherForecastService using @Service
*@
@inherits OwningComponentBase<NotificationServices>


@page "/Dashboard"


<AuthorizeView>
    <Authorized Context="Auth2">
        @page "/Account"
        <div class="container mt-5">
            <h2>My Dashboard</h2>
            <hr class="solid mt-5 custom_hr_solid" />
        </div>
        <div class="container mt-3">
            <div class="row">
                <div class="col-7 my-auto">
                    <p>Welcome @Auth2.User.Identity.Name! </p>
                    <p>Today is @DateTime.Now.DayOfWeek.ToString(), @DateTime.Now.ToString("MMMMM") @DateTime.Now.Day.ToString() @DateTime.Now.ToString("yyyy").</p>
                </div>
                <div class="col-5">
                    <table class="float-right">
                        <tr>
                            <td>
                                <div class="dropdown">
                                    <button class="primary_button dropdown-toggle" type="button" id="dropdownMenuButton" @onclick="@ToggleManageDropDown">
                                        Manage
                                    </button>
                                    <div class="@manageDropDown dropdown-menu ml-1" aria-labelledby="dropdownMenuButton" @onclick="@ToggleManageDropDown">
                                        <a class="dropdown-item" href="Transactions">Transactions</a>
                                        <a class="dropdown-item" href="Notifications">Notifications</a>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    </table>
                </div>
            </div>
        </div>
        <div class="container mt-5">
            <div class="card text-left">
                <div class="card-header">
                    <h3>Notification Rules</h3>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-2 d-flex align-items-center justify-content-center">
                            <div id="circle" class="text-center pt-5">
                                Total:
                                <h2>@returnCount()</h2>
                            </div>
                        </div>
                        <div class="col-10 dotted_border">
                            @if ((ac == null) && (tc == null) && (lc == null) && (notifList == null))
                            {
                                <p><em>There are no notifications rules to display.</em></p>
                            }
                            else
                            {
                                <ul>
                                    @foreach (var x in ac)
                                    {
                                        <li>Transactions between $@x.Min - $@x.Max.</li>
                                    }
                                    @foreach (var x in tc)
                                    {
                                        <li>Transactions between @revertDateTime(x.TimeIn) - @revertDateTime(x.TimeOut).</li>
                                    }
                                    @foreach (var x in lc)
                                    {
                                        <li>Transactions from @x.Location.</li>
                                    }
                                </ul>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="container mt-5">
            <div class="card text-left">
                <div class="card-header">
                    <h3>Notification Summary</h3>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-2 d-flex align-items-center justify-content-center">
                            <div id="circle" class="text-center pt-5">
                                Triggered:
                                @if (triggeredList == null)
                                {
                                    <h2>0</h2>
                                }
                                else
                                {
                                    <h2>@triggerCt</h2>
                                }
                            </div>
                        </div>
                        <div class="col-10 dotted_border my-auto">
                            <p>@month @DateTime.Now.ToString("yyyy")</p>
                            <p>@notiff</p>
                        </div>
                    </div>
                </div>
                <div class="card-footer">
                    <div class="row justify-content-between">
                        <div class="col-6 text-left">
                            <button class="primary_button" @onclick="openFilter">Filter</button>
                        </div>
                        <div class="col-6 text-right">
                            <button class="primary_button" @onclick="DownloadFile">Export </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        @if (showFilter)
        {
            <div class="modal" tabindex="-1" style="display:block" role="dialog" id="larger-modal">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content custom-modal">
                        <div class="modal-header">
                            <h5 class="col-12 modal-title text-center">FILTER NOTIFICATION SUMMARY</h5>
                        </div>
                        <div class="modal-body">
                            <hr class="solid custom_hr_solid mb-3" />
                            <div class="container">
                                <div class="form-group row mt-4">
                                    <label class="col-sm-5 col-form-label">Date: </label>
                                    <div class="col-sm-7">
                                        <select class="form-control" @bind="@month">
                                            <option hidden disabled selected></option>
                                            <option value="Year: ">@DateTime.Now.ToString("yyyy")</option>
                                            @foreach (var property in typeof(UserToNotifications).GetProperties())
                                            {
                                                if (property.Name == "UserId" || property.Name == "AmountConstraint" || property.Name == "LocationConstraint" || property.Name == "TimeConstraint" || property.Name == "NotificationId")
                                                    continue;
                                                else
                                                {
                                                    <option value="@property.Name">@property.Name</option>
                                                }
                                            }
                                        </select>
                                    </div>
                                </div>
                                <div class="form-group row mt-4">
                                    <label class="col-sm-5 col-form-label">Type of Notification: </label>
                                    <div class="col-sm-7">
                                        <select class="form-control" @onchange="FilterSearch">
                                            <option hidden disabled selected></option>
                                            <option value="all">All notifications</option>
                                            @if ((ac == null) && (tc == null) && (lc == null) && (notifList == null))
                                            {
                                                <option>None...</option>
                                            }
                                            else
                                            {
                                                @foreach (var x in ac)
                                                {
                                                    <option value="@x.NotificationId">Between $@x.Min - $@x.Max.</option>
                                                }
                                                @foreach (var x in tc)
                                                {
                                                    <option value="@x.NotificationId">Between @revertDateTime(x.TimeIn) - @revertDateTime(x.TimeOut).</option>
                                                }
                                                @foreach (var x in lc)
                                                {
                                                    <option value="@x.NotificationId">From @x.Location.</option>
                                                }
                                            }
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button class="primary_button ml-auto" @onclick="closeFilter">
                                Cancel
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
        <div class="container mt-5">
            <div class="row">
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="container">
            <h6>Please sign in to access your account information.</h6>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    List<AmountConstraint> ac;
    List<TimeConstraint> tc;
    List<LocationConstraint> lc;
    List<UserToNotifications> notifList;
    List<TriggeredNotif> triggeredList;
    List<joinAllNotifsResult> allJoinedNotifs;
    UserToNotifications tempUTN;
    //Match match = Regex.Match("")

    AmountConstraint tempAC = new AmountConstraint();
    TimeConstraint tempTC = new TimeConstraint();
    LocationConstraint tempLC = new LocationConstraint();

    private bool displayManage = false;
    private bool showFilter = false;
    private string manageDropDown => displayManage ? "d-block" : null;

    /// <summary>
    /// IMPORTANT: gets the current month and the first 3 letters as an abbreviation. This is used to get the proper monthly count in functions
    /// </summary>
    string currMonth = DateTime.Now.ToString("MMMM").Substring(0, 3);

    private int triggerCt = 0;
    private string month = DateTime.Now.ToString("MMMM").Substring(0, 3);
    private string notiff = "All notifications";

    /// <summary>
    /// Changes the bool value of "show filter" - operates the "Filter Notifications" modal.
    /// </summary>
    void openFilter()
    {
        showFilter = true;
    }

    /// <summary>
    /// Changes the bool value of "show filter" - operates the "Filter Notifications" modal.
    /// </summary>
    void closeFilter()
    {
        showFilter = false;
    }

    /// <summary>
    /// Requires an integer and sets the value of the "Triggered" count.
    /// </summary>
    /// <param name="val"></param>
    private void setTrigger(int val)
    {
        triggerCt = val;
    }

    /// <summary>
    /// Requires a string parameter (must be a notification ID or "all") and updates values within the notification summary section.
    /// </summary>
    /// <param name="idVal"></param>
    private void setNotifMess(string idVal)
    {
        if (idVal != "all")
        {
            int id = Int32.Parse(idVal);
            foreach (var x in ac)
            {
                if (id == x.NotificationId)
                {
                    notiff = "Transactions between " + "$" + x.Min + " - " + "$" + x.Max + ".";
                }
            }
            foreach (var x in lc)
            {
                if (id == x.NotificationId)
                {
                    notiff = "Transactions from " + x.Location + ".";
                }
            }
            foreach (var x in tc)
            {
                if (id == x.NotificationId)
                {
                    notiff = "Transactions between " + revertDateTime(x.TimeIn) + " - " + revertDateTime(x.TimeOut) + ".";
                }
            }
        }
        else
        {
            notiff = "All notifications";
            return;
        }
    }

    /// <summary>
    /// Function that automatically updates the notification summary section once page is loaded.
    /// </summary>
    async Task checkNotif()
    {
        if (notiff == "All notifications" && month == "Year: ")
        {
            int sum = 0;
            foreach (var x in notifList)
            {
                sum += getYearlySumOfNotif(x);
            }
            setTrigger(sum);
        }
        else if (notiff == "All notifications" && month != "Year: ")
        {
            int total = 0;
            foreach (var x in notifList)
            {
                total += Int32.Parse(@x.GetType().GetProperty(month).GetValue(x).ToString());
            }
            setTrigger(total);
        }
    }

    /// <summary>
    /// Function that gets called whenever a user selects values to filter the notification summary section.
    /// </summary>
    /// <param name="changeEventArgs"></param>
    public void FilterSearch(ChangeEventArgs changeEventArgs)
    {
        showFilter = false;
        string notifID = changeEventArgs.Value.ToString();
        setNotifMess(notifID);
        if (notiff == "All notifications" && month == "Year: ")
        {
            int sum = 0;
            foreach (var x in notifList)
            {
                sum += getYearlySumOfNotif(x);
            }
            setTrigger(sum);
        }
        else if(notiff == "All notifications" && month != "Year: ")
        {
            int total = 0;
            foreach (var x in notifList)
            {
                total += Int32.Parse(@x.GetType().GetProperty(month).GetValue(x).ToString());
            }
            setTrigger(total);
        }
        else
        {
            int convID = Int32.Parse(notifID);
            foreach (var y in notifList)
            {
                if (convID == y.NotificationId)
                {
                    if (month == "Year: ")
                    {
                        setTrigger(Int32.Parse(getYearlySumOfNotif(y).ToString()));

                    }
                    else
                    {
                        setTrigger(Int32.Parse(@y.GetType().GetProperty(month).GetValue(y).ToString()));
                    }

                }
            }
        }
    }

    /// <summary>
    /// Prepares the page and its variables on load. Since it is async, things will be null for a bit.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

        notifList = await Service.GetNotifJoinTable(userId);
        triggeredList = await Service.GetAllTriggeredNotifEntries(user.Identity.Name);
        ac = await Service.GetAmountConstraints(notifList);
        tc = await Service.GetTimeConstraints(notifList);
        lc = await Service.GetLocationConstraints(notifList);
        await getAllNotifsJoinedWithMonthsAsync();
        await checkNotif();
    }

    /// <summary>
    /// Returns the total count of notification rules.
    /// </summary>
    /// <returns></returns>
    int returnCount()
    {
        int counter = 0;
        if (ac != null)
        {
            counter += ac.Count;
        }
        if (lc != null)
        {
            counter += lc.Count;
        }
        if (tc != null)
        {
            counter += tc.Count;
        }
        return counter;
    }

    /// <summary>
    /// Requires a TimeSpan. Converts the TimeSpan and outputs a string.
    /// </summary>
    /// <param name="theDateTime"></param>
    /// <returns></returns>
    string revertDateTime(TimeSpan theDateTime)
    {
        DateTime time = DateTime.Today.Add(theDateTime);
        string convertedTime = time.ToString("h:mm tt");
        return convertedTime;
    }

    /// <summary>
    /// Function that toggles the Manage button.
    /// </summary>
    private void ToggleManageDropDown()
    {
        displayManage = !displayManage;
    }

    /// <summary>
    /// Returns the string as pure HTML from the database to render in page
    /// </summary>
    /// <param name="text"></param>
    /// <returns></returns>
    public MarkupString getHTMLMarkup(string text)
    {
        return (MarkupString)text;
    }

    /// <summary>
    /// Gets the yearly sum of the notification passed in.
    /// </summary>
    /// <param name="notif"></param>
    /// <returns></returns>
    public int getYearlySumOfNotif(UserToNotifications notif)
    {
        return notif.Jan
        + notif.Feb
        + notif.Mar
        + notif.Apr
        + notif.May
        + notif.Jun
        + notif.Jul
        + notif.Aug
        + notif.Sep
        + notif.Oct
        + notif.Nov
        + notif.Dec;
    }

    public int getIndexOfSubstring(string text, string toMatch)
    {
        return text.IndexOf(toMatch);
    }

    /// <summary>
    /// Async gets all the user's notifications joined with months.
    /// </summary>
    /// <returns></returns>
    async Task getAllNotifsJoinedWithMonthsAsync()
    {
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        allJoinedNotifs = await Service.getAllNotifsJoinedWithDates(userId);
    }


}

@functions{

    async Task DownloadFile()
    {
        using var memorystream = new MemoryStream();
        using var writer = new StreamWriter(memorystream);
        //using var writer = new StreamWriter("../export.csv");
        using var csv = new CsvWriter(writer, CultureInfo.InvariantCulture);
        {
            csv.WriteRecords(allJoinedNotifs);
            writer.Flush();
        }
        string filename = "monthly_notif_trigger_export_" + DateTime.Now.ToString("yyyy") + ".csv";
        //var bytes = System.Text.Encoding.UTF8.GetBytes(text);
        //await FileUtils.SaveAs(js, "export.csv", memorystream.ToArray());
        //var result = writer.ToString();
        //Console.WriteLine(result);
        await Service.SaveAs(js, filename, memorystream.ToArray());
    }
}


