@page "/Transactions"
@using EndToEndTest.Data.CommerceDataModels
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Components.Forms
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpContextAccessor HttpContextAccessor

@*
    Using OwningComponentBase ensures that the service and related services
    that share its scope are disposed with the component.
    Otherwise DbContext in ForecastService will live for the life of the
    connection, which may be problematic if clients stay
    connected for a long time.
    We access WeatherForecastService using @Service
*@
@inherits OwningComponentBase<TransactionServices>

<AuthorizeView>
    <Authorized Context="Auth">
        <div class="container mt-5">
            <h2>My Transactions</h2>
            <hr class="solid mt-5 custom_hr_solid" />
        </div>
        <div class="container mt-3">
            <div class="row">
                @if (usersBankAccount == null)
                {
                    <div class="col-7 my-auto">
                        Available Balance: --
                    </div>
                    <div class="col-5">
                        <button name ="AddTransButton" class="primary_button float-right" @onclick="AddNewTransaction">
                            Add Transaction
                        </button>
                    </div>
                }
                else
                {
                    <div class="col-7">
                        Avalible Balance: $@usersBankAccount[0].Balance
                    </div>
                    <div class="col-5">
                        <button class="primary_button float-right" @onclick="AddNewTransaction">
                            Add Transaction
                        </button>
                    </div>
                }
            </div>
        </div>
        <div class="container mt-5">
            @if (transactionsList == null)
            {
                <p><em>There are no transactions to display.</em></p>
            }
            else
            {
                <table class="table shadow table-borderless table-striped">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Amount</th>
                            <th>Description</th>
                            <th>Location</th>
                            <th>Balance</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td></td>
                            <td></td>
                            <td>Balance</td>
                            <td></td>
                            @if (transactionsList.Count == 0 || transactionsList == null)
                            {
                                <td>There is no initial balance to display</td>
                            }
                            else
                            {<td>$@transactionsList.Last().Openingbalance</td>}
                            <!--this is the old code-->
                            @*<td>$@transactionsList.Last().Openingbalance</td>*@
                        </tr>
                        @foreach (var x in transactionsList)
                        {
                            <tr>
                                <td> @x.Transactiondate.ToString("MM/dd/yyyy") <span id="timeformat">@x.Transactiondate.ToString("h:mm tt")</span></td>
                                <td> $@x.Transactionamount</td>
                                <td> @x.Description</td>
                                <td> @x.LocationState</td>
                                <td>
                                    $@getBalance(x.Openingbalance, @x.Transactionamount)
                                </td>
                            </tr>
                        }
                        <tr>
                            <td></td>
                            <td></td>
                            <td>Balance</td>
                            <td></td>
                            <td>$@transactionsList[0].Openingbalance</td>
                        </tr>
                    </tbody>
                </table>
            }
        </div>
        @if (showPopup)
        {
            <div class="modal" tabindex="-1" style="display:block" role="dialog" id="larger-modal">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="col-12 modal-title text-center">ADD TRANSACTION</h5>
                        </div>
                        <EditForm Model="objTransactionsmaster" OnValidSubmit="SaveTransaction">
                            <DataAnnotationsValidator />
                            <div class="modal-body">
                                <hr class="solid custom_hr_solid mb-3" />
                                <div class="container">
                                    <div class="form-group row mt-4">
                                        <label class="col-sm-5 col-form-label">Transaction Type: </label>
                                        <div class="col-sm-7">
                                            <select @bind="objTransactionsmaster.Transactiontype">
                                                <option hidden disabled selected></option>
                                                <option value=@credit>Deposit</option>
                                                <option value=@debit>Withdrawal</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div class="form-group row mt-4">
                                        <label class="col-sm-5 col-form-label">Amount: </label>
                                        <div class="input-group col-sm-7">
                                            <div class="input-group-prepend">
                                                <div class="input-group-text">$</div>
                                            </div>
                                            <input class="form-control" type="number" min="0.01" step="0.01" inputmode="decimal"
                                                   placeholder="0.01" @bind="objTransactionsmaster.Transactionamount" />
                                        </div>
                                    </div>
                                    <div class="form-group row mt-4">
                                        <label class="col-sm-5 col-form-label">Description: </label>
                                        <div class="col-sm-7">
                                            <input class="form-control" type="text"
                                                   @bind="objTransactionsmaster.Description" />
                                        </div>
                                    </div>
                                    <div class="form-group row mt-4">
                                        <label class="col-sm-5 col-form-label">State: </label>
                                        <div class="col-sm-7">
                                            <select class="form-control" id="exampleFormControlSelect1" @bind="objTransactionsmaster.LocationState">
                                                <option hidden disabled selected></option>
                                                @foreach (var item in allStates)
                                                {
                                                    <option value="@item.Abbrev">@item.Abbrev</option>
                                                }
                                            </select>
                                        </div>
                                    </div>
                                    <div class="row mt-4 align-items-center">
                                        <ValidationSummary />
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button class="primary_button" type="submit">
                                    Add
                                </button>
                                <button class="primary_button ml-auto" @onclick="ClosePopup">
                                    Cancel
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <div class="container mt-5">
            <h6>Please sign in to access your account information.</h6>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    List<Transactionsmaster> transactionsList;
    List<Accounts> usersBankAccount;


    Transactionsmaster objTransactionsmaster = new Transactionsmaster();
    bool showPopup = false;
    private readonly IHttpContextAccessor _httpCA;
    string credit = "CR";
    string debit = "DR";

    /// <summary>
    /// List of all abbreviated class States.
    /// </summary>
    public class States { public string Abbrev { get; set; } };
    List<States> allStates = new List<States>
{
        new States() {Abbrev= "AL"}, new States() {Abbrev= "AK"}, new States() {Abbrev= "AZ"},
        new States() {Abbrev= "AR"}, new States() {Abbrev= "CA"}, new States() {Abbrev= "CO"},
        new States() {Abbrev= "CT"}, new States() {Abbrev= "DC"}, new States() {Abbrev= "DE"},
        new States() {Abbrev= "FL"}, new States() {Abbrev= "GA"}, new States() {Abbrev= "HI"},
        new States() {Abbrev= "ID"}, new States() {Abbrev= "IL"}, new States() {Abbrev= "IN"},
        new States() {Abbrev= "IA"}, new States() {Abbrev= "KS"}, new States() {Abbrev= "KY"},
        new States() {Abbrev= "LA"}, new States() {Abbrev= "ME"}, new States() {Abbrev= "MD"},
        new States() {Abbrev= "MA"}, new States() {Abbrev= "MI"}, new States() {Abbrev= "MN"},
        new States() {Abbrev= "MS"}, new States() {Abbrev= "MO"}, new States() {Abbrev= "MT"},
        new States() {Abbrev= "NE"}, new States() {Abbrev= "NV"}, new States() {Abbrev= "NH"},
        new States() {Abbrev= "NJ"}, new States() {Abbrev= "NM"}, new States() {Abbrev= "NY"},
        new States() {Abbrev= "NC"}, new States() {Abbrev= "ND"}, new States() {Abbrev= "OH"},
        new States() {Abbrev= "OK"}, new States() {Abbrev= "OR"}, new States() {Abbrev= "PA"},
        new States() {Abbrev= "RI"}, new States() {Abbrev= "SC"}, new States() {Abbrev= "SD"},
        new States() {Abbrev= "TN"}, new States() {Abbrev= "TX"}, new States() {Abbrev= "UT"},
        new States() {Abbrev= "VA"}, new States() {Abbrev= "VT"}, new States() {Abbrev= "WA"},
        new States() {Abbrev= "WV"}, new States() {Abbrev= "WI"}, new States() {Abbrev= "WY"}
    };

    /// <summary>
    /// Requires decimal? and decimal parameters. Returns 1 decimal - the balance after a transaction.
    /// </summary>
    /// <param name="thebal"></param>
    /// <param name="amount"></param>
    /// <returns></returns>
    private decimal getBalance(decimal? thebal, decimal amount)
    {
        return ((Convert.ToDecimal(thebal)) + amount);
    }


    /// <summary>
    /// Get the transactions when loading in the page.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

        transactionsList = await Service.GetTransactions(userId);
        usersBankAccount = await Service.GetAccount(userId);
    }

    /// <summary>
    /// Function that aids modal pop up.
    /// </summary>
    void ClosePopup()
    {
        showPopup = false;
    }

    /// <summary>
    /// Prepares the transaction to be added.
    /// </summary>
    async Task AddNewTransaction()
    {
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        objTransactionsmaster = new Transactionsmaster();
        objTransactionsmaster.UserId = userId;
        objTransactionsmaster.TransactionId = 0;
        showPopup = true;
    }

    /// <summary>
    /// Creates the final transaction and saves it to the server. Then, refreshes the view to update the account and transactions view.
    /// </summary>
    /// <returns> Task, or rather nothing </returns>
    async Task SaveTransaction()
    {
        showPopup = false;
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        if (objTransactionsmaster.AccountId == 0)
        {
            Transactionsmaster newTrans = new Transactionsmaster();
            newTrans.UserId = userId;
            newTrans.AccountId = await Service.getUsersBankAccountID(userId);
            newTrans.Transactiondate = System.DateTime.Now;
            newTrans.Openingbalance = Convert.ToDecimal(await Service.GetAccountCurrentBalance(newTrans.AccountId));

            newTrans.Transactiontype = objTransactionsmaster.Transactiontype;
            if (objTransactionsmaster.Transactiontype == "DR")
            {
                newTrans.Transactionamount = objTransactionsmaster.Transactionamount * -1;
            }
            else
            {
                newTrans.Transactionamount = objTransactionsmaster.Transactionamount;
            }

            newTrans.Description = objTransactionsmaster.Description;
            newTrans.LocationState = objTransactionsmaster.LocationState;
            var result = Service.CreateTransactionAsync(newTrans);
            await Service.updateUsersBankBalanceAfterTransaction(newTrans, userId);
        }
        else
        {
            // updates
        }
        // refreshes the transactions afterwards
        transactionsList = await Service.GetTransactions(userId);
        usersBankAccount = await Service.GetAccount(userId);
    }
}