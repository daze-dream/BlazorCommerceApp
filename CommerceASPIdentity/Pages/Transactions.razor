@page "/Transactions"
@using EndToEndTest.Data.CommerceDataModels
@using Data
@using System.Security.Claims
@using Microsoft.AspNetCore.Http;
@using Microsoft.Data.SqlClient
@using Microsoft.AspNetCore.Components.Forms
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpContextAccessor HttpContextAccessor
@*
    Using OwningComponentBase ensures that the service and related services
    that share its scope are disposed with the component.
    Otherwise DbContext in ForecastService will live for the life of the
    connection, which may be problematic if clients stay
    connected for a long time.
    We access WeatherForecastService using @Service
*@
@inherits OwningComponentBase<TransactionServices> 

<AuthorizeView>
    <Authorized>
        <div class="container mt-5">
            <h2>Transactions</h2>
            @if (usersBankAccount == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <p>Account #@usersBankAccount[0].AccountId</p>
                <p>Balance: $@usersBankAccount[0].Balance</p>
            }
            <hr class="solid mt-5 custom_hr_solid" />
        </div>
        <div class="container mt-5">
            @if (transactionsList == null)
            {
                <!-- Show this if the current user has no data... yet... -->

                <p><em>Loading...</em></p>

            }
            else

            {<table class="table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Amount</th>
                            <th>Location</th>
                            <th>Description</th>
                            <th>Date</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var x in transactionsList)
                        {
                            <tr>
                                <td> @x.TransactionId.ToString()</td>
                                <td> $@x.Transactionamount</td>
                                <td> @x.LocationState</td>
                                <td> @x.Description</td>
                                <td> @x.Transactiondate </td>
                            </tr>
                        }
                    </tbody>

                </table>

            }
            <p>

                <!-- Add a new forecast -->

                <button class="btn btn-primary"
                        @onclick="AddNewTransaction">

                    Add Transaction

                </button>

            </p>
            @if (showPopup)
            {
                <!--TODO: temporary popup for transaction adding-->
                <div class="modal" tabindex="-1" style="display:block" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h3 class="modal-title">TEMP EDIT/CREATE</h3>
                                <button type="button" class="close"
                                        @onclick="ClosePopup">
                                    <span aria-hidden="true">X</span>
                                </button>
                            </div>
                            <!--General form for adding transactions-->
                            <div class="modal-body">
                                Transaction type
                                <br /> <br />
                                <select @bind="objTransactionsmaster.Transactiontype">
                                    <option value=@credit>Deposit</option>
                                    <option value=@debit>Withdrawal</option>
                                </select>
                                <br /> 
                                    Amount
                                    <br /> <br />
                                    <input class="form-control" type="number"
                                           placeholder="amount"
                                           @bind="objTransactionsmaster.Transactionamount" />
                                    Description
                                    <br /> <br />
                                    <input class="form-control" type="text"
                                           placeholder="description"
                                           @bind="objTransactionsmaster.Description" />
                                    Location (State)
                                    <br /> <br/>
                                    <input class="form-control" type="text"
                                           placeholder="location"
                                           @bind="objTransactionsmaster.LocationState" />
                                    <br />
                                    <button class="btn btn-primary"
                                            @onclick="SaveTransaction">
                                        Add
                                    </button>

                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="container mt-5">
            <h6>Please sign in to access your account information.</h6>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    List<Transactionsmaster> transactionsList;
    List<Accounts> usersBankAccount;



    Transactionsmaster objTransactionsmaster = new Transactionsmaster();
    bool showPopup = false;
    private readonly IHttpContextAccessor _httpCA;
    string credit = "CR";
    string debit = "DR";


    /// <summary>get the transactions when loading in the page </summary> 
    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

        transactionsList = await Service.GetTransactions(userId);
        usersBankAccount = await Service.GetAccount(userId);
    }
    /// <summary>bool to open and close the Transaction popup</summary> 
    void ClosePopup()
    {
        showPopup = false;
    }
    /// <summary>
    /// prepares the transaction to be added
    /// </summary>
    void AddNewTransaction()
    {
        objTransactionsmaster = new Transactionsmaster();
        objTransactionsmaster.TransactionId = 0;
        showPopup = true;
    }
    /// <summary>
    /// creates the final transaction and saves it to the server. Then, refreshes the view to update the account and transactions view
    /// </summary>
    /// <returns> Task, or rather nothing </returns>
    async Task SaveTransaction()
    {
        showPopup = false;
        // get current userID
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        if (objTransactionsmaster.AccountId == 0)
        {
            Transactionsmaster newTrans = new Transactionsmaster();
            newTrans.UserId = userId;
            newTrans.AccountId = await Service.getUsersBankAccountID(userId);
            newTrans.Transactiondate = System.DateTime.Now;
            newTrans.Openingbalance = Convert.ToDecimal(await Service.GetAccountCurrentBalance(newTrans.AccountId));
            newTrans.Transactiontype = objTransactionsmaster.Transactiontype;
            if(objTransactionsmaster.Transactiontype == "DR")
            {
                newTrans.Transactionamount = objTransactionsmaster.Transactionamount * -1;
            }
            else
            {
                newTrans.Transactionamount = objTransactionsmaster.Transactionamount;
            }
            newTrans.Description = objTransactionsmaster.Description;
            newTrans.LocationState = objTransactionsmaster.LocationState;
            var result = Service.CreateTransactionAsync(newTrans);
            await Service.updateUsersBankBalanceAfterTransaction(newTrans, userId);
        }
        else
        {
            // updates
        }
        // refreshes the transactions afterwards
        transactionsList = await Service.GetTransactions(userId);
        usersBankAccount = await Service.GetAccount(userId);

    }



}
