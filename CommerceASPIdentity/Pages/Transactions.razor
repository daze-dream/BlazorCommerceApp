@page "/Transactions"
@using EndToEndTest.Data.CommerceDataModels
@using Data
@using System.Security.Claims
@using Microsoft.AspNetCore.Http;
@using Microsoft.Data.SqlClient
@using Microsoft.AspNetCore.Components.Forms
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpContextAccessor HttpContextAccessor
@*
    Using OwningComponentBase ensures that the service and related services
    that share its scope are disposed with the component.
    Otherwise DbContext in ForecastService will live for the life of the
    connection, which may be problematic if clients stay
    connected for a long time.
    We access WeatherForecastService using @Service
*@
@inherits OwningComponentBase<TransactionServices> 

<AuthorizeView>
    <Authorized>
        <div class="container mt-5">
            <h2>Transactions</h2>
            <hr class="solid mt-5 custom_hr_solid" />
        </div>
        <div class="container mt-5">
            @if (transactionsList == null)
            {
                <!-- Show this if the current user has no data... yet... -->

                <p><em>Loading...</em></p>

            }
            else

            {<table class="table">
                    <thead>
                        <tr>
                            <th>Transaction ID</th>
                            <th>Amount</th>
                            <th>Location</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var x in transactionsList)
                        {
                            <tr>
                                <td> @x.TransactionId.ToString()</td>
                                <td> @x.Transactionamount</td>
                                <td> @x.LocationState</td>
                                <td> @x.Description</td>
                            </tr>
                        }
                    </tbody>

                </table>

            }
            <p>

                <!-- Add a new forecast -->

                <button class="btn btn-primary"
                        @onclick="AddNewTransaction">

                    Add Transaction

                </button>

            </p>
            @if (showPopup)
            {
                <!--TODO: temporary popup for transaction adding-->
                <div class="modal" tabindex="-1" style="display:block" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h3 class="modal-title">TEMP EDIT/CREATE</h3>
                                <button type="button" class="close"
                                        @onclick="ClosePopup">
                                    <span aria-hidden="true">X</span>
                                </button>
                            </div>
                            <!--General form for adding transactions-->
                            <div class="modal-body">
                                Transaction type
                                <br /> <br />
                                <select @bind="objTransactionsmaster.Transactiontype">
                                    <option value="CR">Deposit</option>
                                    <option value="DR">Withdrawal</option>
                                </select>
                                <br /> 
                                    Amount
                                    <br /> <br />
                                    <input class="form-control" type="number"
                                           placeholder="amount"
                                           @bind="objTransactionsmaster.Transactionamount" />
                                    Description
                                    <br /> <br />
                                    <input class="form-control" type="text"
                                           placeholder="description"
                                           @bind="objTransactionsmaster.Description" />
                                    Location (State)
                                    <br /> <br/>
                                    <input class="form-control" type="text"
                                           placeholder="location"
                                           @bind="objTransactionsmaster.LocationState" />
                                    <br />
                                    <button class="btn btn-primary"
                                            @onclick="SaveTransaction">
                                        Add
                                    </button>

                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="container mt-5">
            <h6>Please sign in to access your account information.</h6>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    List<Transactionsmaster> transactionsList;
    
    Transactionsmaster objTransactionsmaster = new Transactionsmaster();
    bool showPopup = false;
    private readonly IHttpContextAccessor _httpCA;

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

        transactionsList = await Service.GetTransactions(userId);
    }
    void ClosePopup()
    {
        showPopup = false;
    }

    void AddNewTransaction()
    {
        objTransactionsmaster = new Transactionsmaster();
        objTransactionsmaster.TransactionId = 0;
        showPopup = true;
    }

    async Task SaveTransaction()
    {
        showPopup = false;
        // get current userID
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        SqlCommand
        if (objTransactionsmaster.AccountId == 0)
        {
            Transactionsmaster newTrans = new Transactionsmaster();


        }


    }



}
