@page "/Notifications"

@using EndToEndTest.Data.CommerceDataModels
@using Data
@using System.Security.Claims
@using Microsoft.AspNetCore.Http;
@using Microsoft.Data.SqlClient
@using Microsoft.AspNetCore.Components.Forms
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpContextAccessor HttpContextAccessor
@*
    Using OwningComponentBase ensures that the service and related services
    that share its scope are disposed with the component.
    Otherwise DbContext in ForecastService will live for the life of the
    connection, which may be problematic if clients stay
    connected for a long time.
    We access WeatherForecastService using @Service
*@
@inherits OwningComponentBase<NotificationServices>

<AuthorizeView>
    <Authorized>
        <div class="container mt-5">
            <h2>My Notifications</h2>
            <hr class="solid mt-5 custom_hr_solid" />
        </div>
        <div class="container mt-3">
            <div class="row">
                <div class="col-7 my-auto">
                    <p>Total Notifications: @returnCount() </p>
                </div>
                <div class="col-5">
                    <table class="float-right">
                        <tr>
                            <td>
                                <button class="primary_button float-right" @onclick="AddNewNotification">
                                    Add Notification
                                </button>
                            </td>
                        </tr>
                    </table>
                </div>
            </div>
        </div>
        <div class="container mt-5">
            @if ((ac == null) && (tc == null) && (lc == null))
            {
                <p><em>There are no notifications to display.</em></p>
            }
            else
            {
                @foreach (var x in ac)
                {
                    <div class="jumbotron jumbotron-fluid shadow">
                        <div class="container">
                            <div class="row align-items-center">
                               <div class="col-10">
                                   <h3 class="ml-3">Transactions made between $@x.Min - $@x.Max.</h3>
                                </div>
                                <div class="col-2 text-right">
                                    <div class="row float-right mr-3">
                                        <button class="btn" @onclick="() => EditNotif(x)"><span class="material-icons">edit</span></button>
                                        <button class="btn" @onclick="() => DeleteNotif(x)"><span class="material-icons">delete</span></button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                @foreach (var y in tc)
                {
                    <div class="jumbotron jumbotron-fluid shadow">
                        <div class="container">
                            <div class="row align-items-center">
                                <div class="col-10">
                                    <h3 class="ml-3">Transactions made between @revertDateTime(@y.TimeIn) - @revertDateTime(@y.TimeOut).</h3>
                                </div>
                                <div class="col-2 text-right">
                                    <div class="row float-right mr-3">
                                        <button class="btn" @onclick="() => EditNotif(y)"><span class="material-icons">edit</span></button>
                                        <button class="btn" @onclick="() => DeleteNotif(y)"><span class="material-icons">delete</span></button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                @foreach (var z in lc)
                {
                    <div class="jumbotron jumbotron-fluid shadow">
                        <div class="container">
                            <div class="row align-items-center">
                                <div class="col-10">
                                    <h3 class="ml-3">Transactions made from @z.Location.</h3>
                                </div>
                                <div class="col-2 text-right">
                                    <div class="row float-right mr-3">
                                        <button class="btn" @onclick="() => EditNotif(z)"><span class="material-icons">edit</span></button>
                                        <button class="btn" @onclick="() => DeleteNotif(z)"><span class="material-icons">delete</span></button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
        @if (showPopup)
        {
            <div class="modal" tabindex="-1" style="display:block" role="dialog">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content custom-modal">

                        <div class="modal-header">
                            <h5 class="col-12 modal-title text-center">ADD NOTIFICATION</h5>
                        </div>
                        
                        <div class="modal-body">
                            <hr class="solid custom_hr_solid mb-3" />
                            <div class="text-center">
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="radio" name="inlineRadioOptions" id="inlineRadio1" @onclick="@(() => { hideAmountCon(); selectType("amount"); } )">
                                    <label class="form-check-label" for="inlineRadio1">Amount</label>
                                </div>
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="radio" name="inlineRadioOptions" id="inlineRadio2" @onclick="@(() => { hideTimeCon(); selectType("time"); } )">
                                    <label class="form-check-label" for="inlineRadio2">Time</label>
                                </div>
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="radio" name="inlineRadioOptions" id="inlineRadio1" @onclick="@(() => { hideLocCon(); selectType("location"); } )">
                                    <label class="form-check-label" for="inlineRadio2">Location</label>
                                </div>
                            </div>
                            <div class="@hideAmt container">
                                <div class="row align-items-center">
                                    <div class="col-12 pl-3 mt-4">
                                        <div class="form-group row mt-4">
                                            <label class="col-sm-3 col-form-label">Min:</label>
                                            <div class="input-group col-sm-9">
                                                <div class="input-group-prepend">
                                                    <div class="input-group-text">$</div>
                                                </div>
                                                <input class="form-control" type="number" min="0.01" step="0.01" inputmode="decimal"
                                                       placeholder="0.01" @bind="tempAC.Min" />
                                            </div>
                                        </div>
                                        <div class="form-group row mt-4">
                                            <label class="col-sm-3 col-form-label">Max: </label>
                                            <div class="input-group col-sm-9">
                                                <div class="input-group-prepend">
                                                    <div class="input-group-text">$</div>
                                                </div>
                                                <input class="form-control" type="number" min="0.01" step="0.01" inputmode="decimal"
                                                       placeholder="0.01" @bind="tempAC.Max" />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="@hideTm container">
                                <div class="row align-items-center">
                                    <div class="col-12 pl-3 mt-4">
                                        <div class="form-group row mt-4">
                                            <label class="col-sm-3 col-form-label">Start Time: </label>
                                            <div class="col-sm-9">
                                                <input class="form-control" type="time"
                                                       placeholder="Time" @bind="tempMin" />
                                            </div>
                                        </div>
                                        <div class="form-group row mt-4">
                                            <label class="col-sm-3 col-form-label">End Time: </label>
                                            <div class="col-sm-9">
                                                <input class="form-control" type="time"
                                                       placeholder="Time" @bind="tempMax" />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <form class="row g-3">
                                <div class="@hideLoc container">
                                    <div class="row align-items-center">
                                        <div class="col-12 pl-3 mt-4">
                                            <div class="form-group row mt-4">
                                                <label class="col-sm-3 col-form-label">Description: </label>
                                                <div class="col-sm-9">
                                                    <input class="form-control" type="text" @bind="tempLC.Location" required />
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer justify-content-between">
                            <div class="col-6 text-left mt-4">
                                @if (ty == "amount")
                                {
                                    <button class="primary_button" @onclick="() => SaveNotification(tempAC)" type="submit"> Save</button>
                                }
                                else if (ty == "time")
                                {
                                    <button class="primary_button" @onclick="() => SaveNotification(tempTC)" type="submit"> Save</button>
                                }
                                else if (ty == "location")
                                {
                                    <button class="primary_button" @onclick="() => SaveNotification(tempLC)" type="submit"> Save</button>
                                }
                                else
                                {
                                    <button class="primary_button">Save</button>
                                }
                            </div>
                            <div class="col-6 text-right mt-4">
                                <button class="primary_button ml-auto" @onclick="ClosePopupOriginal">
                                    Close
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
        @if (smallPopUp)
        {
            <div class="modal" tabindex="-1" style="display:block" role="dialog">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content custom-modal">
                        <div class="modal-header">
                            <h5 class="col-12 modal-title text-center">EDIT NOTIFICATION</h5>
                        </div>
                        <div class="modal-body">
                            <hr class="solid custom_hr_solid mb-3" />
                            <div class="container text-center">
                                <n1>@message</n1>
                            </div>
                            <form>
                                <div class="@hideAmtSm">
                                    <div class="form-group row mt-4">
                                        <label for="minimumValue" class="col-sm-2 col-form-label">Min: </label>
                                        <div class="input-group col-sm-10">
                                            <div class="input-group-prepend">
                                                <div class="input-group-text">$</div>
                                            </div>
                                            <input class="form-control" type="number" min="0.01" step="0.01" inputmode="decimal"
                                                   placeholder="0.01" @bind="tempAC.Min" id="minimumValue" />
                                        </div>
                                    </div>
                                    <div class="form-group row mt-4">
                                        <label for="maxValue" class="col-sm-2 col-form-label">Max: </label>
                                        <div class="input-group col-sm-10">
                                            <div class="input-group-prepend">
                                                <div class="input-group-text">$</div>
                                            </div>
                                            <input class="form-control" type="number" min="0.01" step="0.01" inputmode="decimal"
                                                   placeholder="0.01" @bind="tempAC.Max" id="maxValue" />
                                        </div>
                                    </div>
                                </div>
                                <div class="@hideTmSm">
                                    <div class="form-group row mt-4">
                                        <label class="col-sm-2 col-form-label">Start Time: </label>
                                        <div class="col-sm-10">
                                            <input class="form-control" type="time"
                                                   placeholder="Time" @bind="tempMin" />
                                        </div>
                                    </div>
                                    <div class="form-group row mt-4">
                                        <label class="col-sm-2 col-form-label">End Time: </label>
                                        <div class="col-sm-10">
                                            <input class="form-control" type="time"
                                                   placeholder="Time" @bind="tempMax" />
                                        </div>
                                    </div>
                                </div>
                                <div class="@hideLocSm">
                                    <div class="form-group row mt-4">
                                        <label class="col-sm-2 col-form-label">Description: </label>
                                        <div class="col-sm-10">
                                            <input class="form-control" type="text" @bind="tempLC.Location"/>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <div class="col-6 text-left mt-4">
                                @if (ty == "amount")
                                {
                                    <button class="primary_button" @onclick="() => SaveNotification(tempAC)" type="submit"> Save</button>
                                }
                                else if (ty == "time")
                                {
                                    <button class="primary_button" @onclick="() => SaveNotification(tempTC)" type="submit"> Save</button>
                                }
                                else if (ty == "location")
                                {
                                    <button class="primary_button" @onclick="() => SaveNotification(tempLC)" type="submit"> Save</button>
                                }
                                else
                                {
                                    <button class="primary_button">Save</button>
                                }
                            </div>
                            <button class="primary_button ml-auto" @onclick="CloseSmallPopup">
                                Close
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <div class="container mt-5">
            <h6>Please sign in to access your account information.</h6>
        </div>
    </NotAuthorized>
</AuthorizeView>




@code {
    @inject NavigationManager NavMan;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    List<AmountConstraint> ac;
    List<TimeConstraint> tc;
    List<LocationConstraint> lc;
    List<UserToNotifications> notifList;

    DateTime tempMin;
    DateTime tempMax;

    AmountConstraint tempAC = new AmountConstraint();
    TimeConstraint tempTC = new TimeConstraint();
    LocationConstraint tempLC = new LocationConstraint();

    private bool smallPopUp = false;
    private bool showPopup = false;
    private bool hideDivAmt = true;
    private bool hideDivLoc = true;
    private bool hideDivTm = true;
    private bool hideSmAmt = true;
    private bool hideSmTime = true;
    private bool hideSmLoc = true;
    private string hideAmt => hideDivAmt ? "d-none" : null;
    private string hideLoc => hideDivLoc ? "d-none" : null;
    private string hideTm => hideDivTm ? "d-none" : null;
    private string hideAmtSm => hideSmAmt ? "d-none" : null;
    private string hideLocSm => hideSmLoc ? "d-none" : null;
    private string hideTmSm => hideSmTime ? "d-none" : null;
    private string message = "";
    private string ty = "";

    /// <summary>
    /// Requires a string parameter. Assigns a value to the string "ty". Helps to determine which type of button should be displayed.
    /// </summary>
    /// <param name="e"></param>
    private void selectType(string e)
    {
        ty = e;
    }

    /// <summary>
    /// Functions that aid in Modal popups and hiding Div containers.
    /// </summary>
    void AddNewNotification()
    {
        showPopup = true;
    }
    void ClosePopupOriginal()
    {
        showPopup = false;
    }
    void CloseSmallPopup()
    {
        smallPopUp = false;
        hideSmAmt = true;
        hideSmTime = true;
        hideSmLoc = true;
    }
    private void hideAmountCon()
    {
        hideDivAmt = false;
        hideDivLoc = true;
        hideDivTm = true;
    }
    private void hideLocCon()
    {
        hideDivAmt = true;
        hideDivLoc = false;
        hideDivTm = true;
    }
    private void hideTimeCon() {
        hideDivAmt = true;
        hideDivLoc = true;
        hideDivTm = false;
    }
    private void hideSmAmount()
    {
        hideSmAmt = !hideSmAmt;
    }
    private void hideSmTimes()
    {
        hideSmTime = !hideSmTime;
    }
    private void hideSmLocation()
    {
        hideSmLoc = !hideSmLoc;
    }

    /// <summary>
    /// Initializes all the appropriate variables to be displayed as soon as the page is loaded.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

        notifList = await Service.GetNotifJoinTable(userId);
        ac = await Service.GetAmountConstraints(notifList);
        tc = await Service.GetTimeConstraints(notifList);
        lc = await Service.GetLocationConstraints(notifList);
    }

    /// <summary>
    /// Prepares new notification to be added, used in the HTML forms. Checks incoming object type to determine what to add.
    /// Each scenario first adds a new entry to the join table, then to the corresponding table.
    /// </summary>
    async Task SaveNotification(object x)
    {
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        if (x is AmountConstraint)
        {
            if (tempAC.NotificationId == 0)
            {
                prepareNewUserToNotifJoinEntry(userId);
                AmountConstraint newNotif = (AmountConstraint)x;
                newNotif.Min = tempAC.Min;
                newNotif.Max = tempAC.Max;
                newNotif.NotificationId = await Service.GetMostRecentNotifJoinTableRule(userId);
                var result = Service.AddAmountNotification(newNotif);
            }
            else
            {
                var result = Service.updateNotificationsAsync(tempAC);
            }
        }
        else if (x is TimeConstraint)
        {
            if (tempTC.NotificationId == 0)
            {
                prepareNewUserToNotifJoinEntry(userId);
                TimeConstraint newNotif = (TimeConstraint)x;
                newNotif.TimeIn = tempMin.TimeOfDay;
                newNotif.TimeOut = tempMax.TimeOfDay;
                newNotif.NotificationId = await Service.GetMostRecentNotifJoinTableRule(userId);

                var result = Service.AddTimeNotification(newNotif);
            }
            else
            {
                tempTC.TimeIn = tempMin.TimeOfDay;
                tempTC.TimeOut = tempMax.TimeOfDay;
                var result = Service.updateNotificationsAsync(tempTC);

            }
        }
        else if (x is LocationConstraint)
        {
            if (tempLC.NotificationId == 0)
            {
                prepareNewUserToNotifJoinEntry(userId);
                LocationConstraint newNotif = (LocationConstraint)x;
                newNotif.Location = tempLC.Location;
                newNotif.NotificationId = await Service.GetMostRecentNotifJoinTableRule(userId);

                var result = Service.AddLocationNotification(newNotif);
            }
            else
            {
                var result = Service.updateNotificationsAsync(tempLC);

            }
        }
        //showPopup = false;
        if(smallPopUp == true)
        {
            smallPopUp = false;
            NavMan.NavigateTo("Notifications", true);
        }
        if (showPopup == true)
        {
            showPopup = false;
            NavMan.NavigateTo("Notifications", true);
        }

        notifList = await Service.GetNotifJoinTable(userId);
        ac = await Service.GetAmountConstraints(notifList);
        tc = await Service.GetTimeConstraints(notifList);
        lc = await Service.GetLocationConstraints(notifList);
    }

    /// <summary>
    /// Requires an object parameter. Deletes entries from the database given the parameter.
    /// </summary>
    /// <param name="notif"></param>
    /// <returns></returns>
    async Task DeleteNotif(object notif)
    {
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

        var result = Service.DeleteNotificationAsync(notif);

        notifList = await Service.GetNotifJoinTable(userId);
        ac = await Service.GetAmountConstraints(notifList);
        tc = await Service.GetTimeConstraints(notifList);
        lc = await Service.GetLocationConstraints(notifList);
    }

    void prepareNewUserToNotifJoinEntry(string userID)
    {
        UserToNotifications newEntry = new UserToNotifications();
        newEntry.UserId = userID;
        Service.AddNewUsersToNotifJoinTableEntry(newEntry);

    }

    /// <summary>
    /// Requires a TimeSpan parameter. Converts the Timespan and outputs a string.
    /// </summary>
    /// <param name="theDateTime"></param>
    /// <returns></returns>
    string revertDateTime(TimeSpan theDateTime)
    {
        DateTime time = DateTime.Today.Add(theDateTime);
        string convertedTime = time.ToString("h:mm tt");
        return convertedTime;
    }

    /// <summary>
    /// Sets the value of "counter" to display the total number of active notification rules.
    /// </summary>
    /// <returns></returns>
    int returnCount()
    {
        int counter = 0;
        if (ac != null)
        {
            counter += ac.Count;
        }
        if (lc != null)
        {
            counter += lc.Count;
        }
        if (tc != null)
        {
            counter += tc.Count;
        }
        return counter;
    }

    /// <summary>
    /// Requires an object parameter. Sets the visibility of div containers, values, and existing database values for editing.
    /// </summary>
    /// <param name="notif"></param>
    void EditNotif(object notif)
    {
        if (notif is AmountConstraint)
        {
            tempAC = (AmountConstraint)notif;
            smallPopUp = true;
            hideSmAmt = false;
            message = "Enter a new minimum and maximum dollar amount";
            ty = "amount";
        }
        else if (notif is TimeConstraint)
        {
            tempTC = (TimeConstraint)notif;
            tempMin = Convert.ToDateTime(tempTC.TimeIn.ToString());
            tempMax = Convert.ToDateTime(tempTC.TimeOut.ToString());
            smallPopUp = true;
            hideSmTime = false;
            message = "Select a new start and end time.";
            ty = "time";
        }
        else if (notif is LocationConstraint)
        {
            tempLC = (LocationConstraint)notif;
            smallPopUp = true;
            hideSmLoc = false;
            message = "Enter a new description.";
            ty = "location";
        }
    }
}
