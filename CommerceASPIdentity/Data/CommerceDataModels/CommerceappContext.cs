// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace EndToEndTest.Data.CommerceDataModels
{
    public partial class CommerceappContext : DbContext
    {
        public CommerceappContext()
        {
        }

        public CommerceappContext(DbContextOptions<CommerceappContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Accounts> Accounts { get; set; }
        public virtual DbSet<AmountConstraint> AmountConstraint { get; set; }
        public virtual DbSet<LocationConstraint> LocationConstraint { get; set; }
        public virtual DbSet<NotifTriggerCountArchive> NotifTriggerCountArchive { get; set; }
        public virtual DbSet<TimeConstraint> TimeConstraint { get; set; }
        public virtual DbSet<Transactionsmaster> Transactionsmaster { get; set; }
        public virtual DbSet<TriggeredNotif> TriggeredNotif { get; set; }
        public virtual DbSet<UserInfo> UserInfo { get; set; }
        public virtual DbSet<UserToNotifications> UserToNotifications { get; set; }
        public virtual DbSet<Userstoaccounts> Userstoaccounts { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<Accounts>(entity =>
            {
                entity.Property(e => e.Balance).HasDefaultValueSql("((0.00))");
            });

            modelBuilder.Entity<AmountConstraint>(entity =>
            {
                entity.Property(e => e.NotificationId).ValueGeneratedNever();

                entity.HasOne(d => d.Notification)
                    .WithOne(p => p.AmountConstraint)
                    .HasForeignKey<AmountConstraint>(d => d.NotificationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_amount_constraint_userToNotifications");
            });

            modelBuilder.Entity<LocationConstraint>(entity =>
            {
                entity.Property(e => e.NotificationId).ValueGeneratedNever();

                entity.Property(e => e.Location).IsUnicode(false);

                entity.HasOne(d => d.Notification)
                    .WithOne(p => p.LocationConstraint)
                    .HasForeignKey<LocationConstraint>(d => d.NotificationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_location_constraint_userToNotifications");
            });

            modelBuilder.Entity<NotifTriggerCountArchive>(entity =>
            {
                entity.Property(e => e.ArchiveId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<TimeConstraint>(entity =>
            {
                entity.Property(e => e.NotificationId).ValueGeneratedNever();

                entity.HasOne(d => d.Notification)
                    .WithOne(p => p.TimeConstraint)
                    .HasForeignKey<TimeConstraint>(d => d.NotificationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_time_constraint_userToNotifications");
            });

            modelBuilder.Entity<Transactionsmaster>(entity =>
            {
                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.LocationState).IsUnicode(false);

                entity.Property(e => e.Transactiontype)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.Transactionsmaster)
                    .HasForeignKey(d => d.AccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_transactionsmaster_accounts");
            });

            modelBuilder.Entity<TriggeredNotif>(entity =>
            {
                entity.Property(e => e.DateAdded).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.TrigNotifId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<UserInfo>(entity =>
            {
                entity.Property(e => e.Additionalname).IsUnicode(false);

                entity.Property(e => e.Address1).IsUnicode(false);

                entity.Property(e => e.Address2).IsUnicode(false);

                entity.Property(e => e.City).IsUnicode(false);

                entity.Property(e => e.Country).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Firstname).IsUnicode(false);

                entity.Property(e => e.Lastname).IsUnicode(false);

                entity.Property(e => e.Phonenumber).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);
            });

            modelBuilder.Entity<Userstoaccounts>(entity =>
            {
                entity.HasOne(d => d.Account)
                    .WithMany()
                    .HasForeignKey(d => d.AccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_userstoaccounts_accounts");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}