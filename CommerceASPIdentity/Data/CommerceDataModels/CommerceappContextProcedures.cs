// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore;
using Microsoft.Data.SqlClient;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using EndToEndTest.Data.CommerceDataModels;

namespace EndToEndTest.Data.CommerceDataModels
{
    public partial class CommerceappContext
    {
        private CommerceappContextProcedures _procedures;

        public CommerceappContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new CommerceappContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public CommerceappContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class CommerceappContextProcedures
    {
        private readonly CommerceappContext _context;

        public CommerceappContextProcedures(CommerceappContext context)
        {
            _context = context;
        }

        public virtual async Task<List<joinAllNotifsResult>> joinAllNotifsAsync(string userID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userID",
                    Size = 900,
                    Value = userID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<joinAllNotifsResult>("EXEC @returnValue = [dbo].[joinAllNotifs] @userID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
