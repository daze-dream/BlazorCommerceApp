@using System.Security.Claims

@using EndToEndTest.Data.CommerceDataModels
@using Data
@using Microsoft.AspNetCore.Http;
@using Microsoft.Data.SqlClient
@using Microsoft.AspNetCore.Components.Forms

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager MyNavigationManager 

@inherits OwningComponentBase<TransactionSummary>

<AuthorizeView>
    <Authorized>
        <div class="row align-items-center ml-3"><a class="nav-link" href="/">About</a></div>
        <div class="row align-items-center ml-3"><a class="nav-link" href="Dashboard">Dashboard</a></div>
        <div class="row align-items-center ml-3"><a class="nav-link" href="Transactions">Transactions</a></div>
        <div class="row align-items-center ml-3">
            <!--
                This part of the code is for dropdown menu for the 5 most recent transactions made in account
                Key = transaction description
                value = transaction amount
            -->
            <div class="dropdown">
<<<<<<< HEAD
                <i class="oi oi-bell ml-3" @onclick="@displayNotifBell">
                    <a class="@displayBell" href="Notifications">
                        <div class="dropdown-content">
                            @foreach (var x in notifications) //for every transactions made
                            {
                                <div class="row notifAlerts">
                                    <span class="alertMess">@x.EmailBody.Substring(131).Substring(0, getIndexOfSubstring(x.EmailBody.Substring(131), "If"))</span>
                                </div>
                            }
=======
                <a class="@displayBell" @onclick="@displayNotifBell" href="Notifications"><i class="oi oi-bell"></i></a>


                <div class="dropdown-content">
                    <div class="row notifAlerts">
                        <span class="alertMess">CATS...</span>
                    </div>
                    @if (notifSummaries == null)
                    {
                        <div class="row notifAlerts">
                            <span class="alertMess">Loading...</span>
>>>>>>> main
                        </div>
                    </a>
                </i>
            </div>
            <a class="nav-link" href="Notifications">Notifications</a>
        </div>
        <div class="row align-items-center ml-1">
            <form method="post" action="Identity/Account/LogOut">
                <button type="submit" class="btn nav_bar_button">Log out</button>
            </form>
        </div>
<<<<<<< HEAD
        <!--
        <div>
            <button class="btn-sm" @onclick="@displayNotifBell">Display</button>
        </div>
        -->
=======

        <!--<div>
            <button class="btn-sm" @onclick="@displayNotifBell">Display</button>
        </div>-->

>>>>>>> main
    </Authorized>
    <NotAuthorized>
        <div class="row align-items-center ml-3"><a class="nav-link" href="/">About</a></div>
        <div class="row align-items-center ml-3"><a href="Identity/Account/Register">Register</a></div>
        <div class="row align-items-center ml-3"><a href="Identity/Account/Login">Log in</a></div>
    </NotAuthorized>
</AuthorizeView>

@code {
    public List<Transactionsmaster> transactionsList;
    public List<Tuple<String, decimal>> transDesc;
    public List<TriggeredNotif> notifications;
    private string userEmail;

    private string displayBell = "d-none";

    private async Task displayNotifBell()
    {
        if (displayBell == "d-none")
            displayBell = "d-block";
        else
            displayBell = "d-none";
        //transactionsList = await Service.GetRecentTransaction(userID);
        //transDesc = await Service.getTransactionDescription(userID);
        notifications = await Service.getRecentTriggeredNotif(userEmail);
    }

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        string userID = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        userEmail = user.Identity.Name;

        transactionsList = await Service.GetRecentTransaction(userID);
        transDesc = await Service.getTransactionDescription(userID);
        notifications = await Service.getRecentTriggeredNotif(userEmail);
    }

    public MarkupString getHTMLMarkup(string text)
    {
        return (MarkupString)text;
    }

    public int getIndexOfSubstring(string text, string toMatch)
    {
        return text.IndexOf(toMatch);
    }
}